//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct Reg(ffi::xed_reg_enum_t);

impl Reg {
    pub const BNDCFGU: Reg = Reg(ffi::XED_REG_BNDCFGU);

    pub const BNDCFG_FIRST: Reg = Reg(ffi::XED_REG_BNDCFG_FIRST);

    pub const BNDCFG_LAST: Reg = Reg(ffi::XED_REG_BNDCFG_LAST);

    pub const BNDSTATUS: Reg = Reg(ffi::XED_REG_BNDSTATUS);

    pub const BNDSTAT_FIRST: Reg = Reg(ffi::XED_REG_BNDSTAT_FIRST);

    pub const BNDSTAT_LAST: Reg = Reg(ffi::XED_REG_BNDSTAT_LAST);

    pub const BND0: Reg = Reg(ffi::XED_REG_BND0);

    pub const BOUND_FIRST: Reg = Reg(ffi::XED_REG_BOUND_FIRST);

    pub const BND1: Reg = Reg(ffi::XED_REG_BND1);

    pub const BND2: Reg = Reg(ffi::XED_REG_BND2);

    pub const BND3: Reg = Reg(ffi::XED_REG_BND3);

    pub const BOUND_LAST: Reg = Reg(ffi::XED_REG_BOUND_LAST);

    pub const CR0: Reg = Reg(ffi::XED_REG_CR0);

    pub const CR_FIRST: Reg = Reg(ffi::XED_REG_CR_FIRST);

    pub const CR1: Reg = Reg(ffi::XED_REG_CR1);

    pub const CR2: Reg = Reg(ffi::XED_REG_CR2);

    pub const CR3: Reg = Reg(ffi::XED_REG_CR3);

    pub const CR4: Reg = Reg(ffi::XED_REG_CR4);

    pub const CR5: Reg = Reg(ffi::XED_REG_CR5);

    pub const CR6: Reg = Reg(ffi::XED_REG_CR6);

    pub const CR7: Reg = Reg(ffi::XED_REG_CR7);

    pub const CR8: Reg = Reg(ffi::XED_REG_CR8);

    pub const CR9: Reg = Reg(ffi::XED_REG_CR9);

    pub const CR10: Reg = Reg(ffi::XED_REG_CR10);

    pub const CR11: Reg = Reg(ffi::XED_REG_CR11);

    pub const CR12: Reg = Reg(ffi::XED_REG_CR12);

    pub const CR13: Reg = Reg(ffi::XED_REG_CR13);

    pub const CR14: Reg = Reg(ffi::XED_REG_CR14);

    pub const CR15: Reg = Reg(ffi::XED_REG_CR15);

    pub const CR_LAST: Reg = Reg(ffi::XED_REG_CR_LAST);

    pub const DR0: Reg = Reg(ffi::XED_REG_DR0);

    pub const DR_FIRST: Reg = Reg(ffi::XED_REG_DR_FIRST);

    pub const DR1: Reg = Reg(ffi::XED_REG_DR1);

    pub const DR2: Reg = Reg(ffi::XED_REG_DR2);

    pub const DR3: Reg = Reg(ffi::XED_REG_DR3);

    pub const DR4: Reg = Reg(ffi::XED_REG_DR4);

    pub const DR5: Reg = Reg(ffi::XED_REG_DR5);

    pub const DR6: Reg = Reg(ffi::XED_REG_DR6);

    pub const DR7: Reg = Reg(ffi::XED_REG_DR7);

    pub const DR_LAST: Reg = Reg(ffi::XED_REG_DR_LAST);

    pub const FLAGS: Reg = Reg(ffi::XED_REG_FLAGS);

    pub const FLAGS_FIRST: Reg = Reg(ffi::XED_REG_FLAGS_FIRST);

    pub const EFLAGS: Reg = Reg(ffi::XED_REG_EFLAGS);

    pub const RFLAGS: Reg = Reg(ffi::XED_REG_RFLAGS);

    pub const FLAGS_LAST: Reg = Reg(ffi::XED_REG_FLAGS_LAST);

    pub const AX: Reg = Reg(ffi::XED_REG_AX);

    pub const GPR16_FIRST: Reg = Reg(ffi::XED_REG_GPR16_FIRST);

    pub const CX: Reg = Reg(ffi::XED_REG_CX);

    pub const DX: Reg = Reg(ffi::XED_REG_DX);

    pub const BX: Reg = Reg(ffi::XED_REG_BX);

    pub const SP: Reg = Reg(ffi::XED_REG_SP);

    pub const BP: Reg = Reg(ffi::XED_REG_BP);

    pub const SI: Reg = Reg(ffi::XED_REG_SI);

    pub const DI: Reg = Reg(ffi::XED_REG_DI);

    pub const R8W: Reg = Reg(ffi::XED_REG_R8W);

    pub const R9W: Reg = Reg(ffi::XED_REG_R9W);

    pub const R10W: Reg = Reg(ffi::XED_REG_R10W);

    pub const R11W: Reg = Reg(ffi::XED_REG_R11W);

    pub const R12W: Reg = Reg(ffi::XED_REG_R12W);

    pub const R13W: Reg = Reg(ffi::XED_REG_R13W);

    pub const R14W: Reg = Reg(ffi::XED_REG_R14W);

    pub const R15W: Reg = Reg(ffi::XED_REG_R15W);

    pub const GPR16_LAST: Reg = Reg(ffi::XED_REG_GPR16_LAST);

    pub const EAX: Reg = Reg(ffi::XED_REG_EAX);

    pub const GPR32_FIRST: Reg = Reg(ffi::XED_REG_GPR32_FIRST);

    pub const ECX: Reg = Reg(ffi::XED_REG_ECX);

    pub const EDX: Reg = Reg(ffi::XED_REG_EDX);

    pub const EBX: Reg = Reg(ffi::XED_REG_EBX);

    pub const ESP: Reg = Reg(ffi::XED_REG_ESP);

    pub const EBP: Reg = Reg(ffi::XED_REG_EBP);

    pub const ESI: Reg = Reg(ffi::XED_REG_ESI);

    pub const EDI: Reg = Reg(ffi::XED_REG_EDI);

    pub const R8D: Reg = Reg(ffi::XED_REG_R8D);

    pub const R9D: Reg = Reg(ffi::XED_REG_R9D);

    pub const R10D: Reg = Reg(ffi::XED_REG_R10D);

    pub const R11D: Reg = Reg(ffi::XED_REG_R11D);

    pub const R12D: Reg = Reg(ffi::XED_REG_R12D);

    pub const R13D: Reg = Reg(ffi::XED_REG_R13D);

    pub const R14D: Reg = Reg(ffi::XED_REG_R14D);

    pub const R15D: Reg = Reg(ffi::XED_REG_R15D);

    pub const GPR32_LAST: Reg = Reg(ffi::XED_REG_GPR32_LAST);

    pub const RAX: Reg = Reg(ffi::XED_REG_RAX);

    pub const GPR64_FIRST: Reg = Reg(ffi::XED_REG_GPR64_FIRST);

    pub const RCX: Reg = Reg(ffi::XED_REG_RCX);

    pub const RDX: Reg = Reg(ffi::XED_REG_RDX);

    pub const RBX: Reg = Reg(ffi::XED_REG_RBX);

    pub const RSP: Reg = Reg(ffi::XED_REG_RSP);

    pub const RBP: Reg = Reg(ffi::XED_REG_RBP);

    pub const RSI: Reg = Reg(ffi::XED_REG_RSI);

    pub const RDI: Reg = Reg(ffi::XED_REG_RDI);

    pub const R8: Reg = Reg(ffi::XED_REG_R8);

    pub const R9: Reg = Reg(ffi::XED_REG_R9);

    pub const R10: Reg = Reg(ffi::XED_REG_R10);

    pub const R11: Reg = Reg(ffi::XED_REG_R11);

    pub const R12: Reg = Reg(ffi::XED_REG_R12);

    pub const R13: Reg = Reg(ffi::XED_REG_R13);

    pub const R14: Reg = Reg(ffi::XED_REG_R14);

    pub const R15: Reg = Reg(ffi::XED_REG_R15);

    pub const GPR64_LAST: Reg = Reg(ffi::XED_REG_GPR64_LAST);

    pub const AL: Reg = Reg(ffi::XED_REG_AL);

    pub const GPR8_FIRST: Reg = Reg(ffi::XED_REG_GPR8_FIRST);

    pub const CL: Reg = Reg(ffi::XED_REG_CL);

    pub const DL: Reg = Reg(ffi::XED_REG_DL);

    pub const BL: Reg = Reg(ffi::XED_REG_BL);

    pub const SPL: Reg = Reg(ffi::XED_REG_SPL);

    pub const BPL: Reg = Reg(ffi::XED_REG_BPL);

    pub const SIL: Reg = Reg(ffi::XED_REG_SIL);

    pub const DIL: Reg = Reg(ffi::XED_REG_DIL);

    pub const R8B: Reg = Reg(ffi::XED_REG_R8B);

    pub const R9B: Reg = Reg(ffi::XED_REG_R9B);

    pub const R10B: Reg = Reg(ffi::XED_REG_R10B);

    pub const R11B: Reg = Reg(ffi::XED_REG_R11B);

    pub const R12B: Reg = Reg(ffi::XED_REG_R12B);

    pub const R13B: Reg = Reg(ffi::XED_REG_R13B);

    pub const R14B: Reg = Reg(ffi::XED_REG_R14B);

    pub const R15B: Reg = Reg(ffi::XED_REG_R15B);

    pub const GPR8_LAST: Reg = Reg(ffi::XED_REG_GPR8_LAST);

    pub const AH: Reg = Reg(ffi::XED_REG_AH);

    pub const GPR8H_FIRST: Reg = Reg(ffi::XED_REG_GPR8h_FIRST);

    pub const CH: Reg = Reg(ffi::XED_REG_CH);

    pub const DH: Reg = Reg(ffi::XED_REG_DH);

    pub const BH: Reg = Reg(ffi::XED_REG_BH);

    pub const GPR8H_LAST: Reg = Reg(ffi::XED_REG_GPR8h_LAST);

    pub const INVALID: Reg = Reg(ffi::XED_REG_INVALID);

    pub const INVALID_FIRST: Reg = Reg(ffi::XED_REG_INVALID_FIRST);

    pub const ERROR: Reg = Reg(ffi::XED_REG_ERROR);

    pub const INVALID_LAST: Reg = Reg(ffi::XED_REG_INVALID_LAST);

    pub const RIP: Reg = Reg(ffi::XED_REG_RIP);

    pub const IP_FIRST: Reg = Reg(ffi::XED_REG_IP_FIRST);

    pub const EIP: Reg = Reg(ffi::XED_REG_EIP);

    pub const IP: Reg = Reg(ffi::XED_REG_IP);

    pub const IP_LAST: Reg = Reg(ffi::XED_REG_IP_LAST);

    pub const K0: Reg = Reg(ffi::XED_REG_K0);

    pub const MASK_FIRST: Reg = Reg(ffi::XED_REG_MASK_FIRST);

    pub const K1: Reg = Reg(ffi::XED_REG_K1);

    pub const K2: Reg = Reg(ffi::XED_REG_K2);

    pub const K3: Reg = Reg(ffi::XED_REG_K3);

    pub const K4: Reg = Reg(ffi::XED_REG_K4);

    pub const K5: Reg = Reg(ffi::XED_REG_K5);

    pub const K6: Reg = Reg(ffi::XED_REG_K6);

    pub const K7: Reg = Reg(ffi::XED_REG_K7);

    pub const MASK_LAST: Reg = Reg(ffi::XED_REG_MASK_LAST);

    pub const MMX0: Reg = Reg(ffi::XED_REG_MMX0);

    pub const MMX_FIRST: Reg = Reg(ffi::XED_REG_MMX_FIRST);

    pub const MMX1: Reg = Reg(ffi::XED_REG_MMX1);

    pub const MMX2: Reg = Reg(ffi::XED_REG_MMX2);

    pub const MMX3: Reg = Reg(ffi::XED_REG_MMX3);

    pub const MMX4: Reg = Reg(ffi::XED_REG_MMX4);

    pub const MMX5: Reg = Reg(ffi::XED_REG_MMX5);

    pub const MMX6: Reg = Reg(ffi::XED_REG_MMX6);

    pub const MMX7: Reg = Reg(ffi::XED_REG_MMX7);

    pub const MMX_LAST: Reg = Reg(ffi::XED_REG_MMX_LAST);

    pub const SSP: Reg = Reg(ffi::XED_REG_SSP);

    pub const MSR_FIRST: Reg = Reg(ffi::XED_REG_MSR_FIRST);

    pub const IA32_U_CET: Reg = Reg(ffi::XED_REG_IA32_U_CET);

    pub const MSR_LAST: Reg = Reg(ffi::XED_REG_MSR_LAST);

    pub const MXCSR: Reg = Reg(ffi::XED_REG_MXCSR);

    pub const MXCSR_FIRST: Reg = Reg(ffi::XED_REG_MXCSR_FIRST);

    pub const MXCSR_LAST: Reg = Reg(ffi::XED_REG_MXCSR_LAST);

    pub const STACKPUSH: Reg = Reg(ffi::XED_REG_STACKPUSH);

    pub const PSEUDO_FIRST: Reg = Reg(ffi::XED_REG_PSEUDO_FIRST);

    pub const STACKPOP: Reg = Reg(ffi::XED_REG_STACKPOP);

    pub const GDTR: Reg = Reg(ffi::XED_REG_GDTR);

    pub const LDTR: Reg = Reg(ffi::XED_REG_LDTR);

    pub const IDTR: Reg = Reg(ffi::XED_REG_IDTR);

    pub const TR: Reg = Reg(ffi::XED_REG_TR);

    pub const TSC: Reg = Reg(ffi::XED_REG_TSC);

    pub const TSCAUX: Reg = Reg(ffi::XED_REG_TSCAUX);

    pub const MSRS: Reg = Reg(ffi::XED_REG_MSRS);

    pub const FSBASE: Reg = Reg(ffi::XED_REG_FSBASE);

    pub const GSBASE: Reg = Reg(ffi::XED_REG_GSBASE);

    pub const TILECONFIG: Reg = Reg(ffi::XED_REG_TILECONFIG);

    pub const PSEUDO_LAST: Reg = Reg(ffi::XED_REG_PSEUDO_LAST);

    pub const X87CONTROL: Reg = Reg(ffi::XED_REG_X87CONTROL);

    pub const PSEUDOX87_FIRST: Reg = Reg(ffi::XED_REG_PSEUDOX87_FIRST);

    pub const X87STATUS: Reg = Reg(ffi::XED_REG_X87STATUS);

    pub const X87TAG: Reg = Reg(ffi::XED_REG_X87TAG);

    pub const X87PUSH: Reg = Reg(ffi::XED_REG_X87PUSH);

    pub const X87POP: Reg = Reg(ffi::XED_REG_X87POP);

    pub const X87POP2: Reg = Reg(ffi::XED_REG_X87POP2);

    pub const X87OPCODE: Reg = Reg(ffi::XED_REG_X87OPCODE);

    pub const X87LASTCS: Reg = Reg(ffi::XED_REG_X87LASTCS);

    pub const X87LASTIP: Reg = Reg(ffi::XED_REG_X87LASTIP);

    pub const X87LASTDS: Reg = Reg(ffi::XED_REG_X87LASTDS);

    pub const X87LASTDP: Reg = Reg(ffi::XED_REG_X87LASTDP);

    pub const PSEUDOX87_LAST: Reg = Reg(ffi::XED_REG_PSEUDOX87_LAST);

    pub const ES: Reg = Reg(ffi::XED_REG_ES);

    pub const SR_FIRST: Reg = Reg(ffi::XED_REG_SR_FIRST);

    pub const CS: Reg = Reg(ffi::XED_REG_CS);

    pub const SS: Reg = Reg(ffi::XED_REG_SS);

    pub const DS: Reg = Reg(ffi::XED_REG_DS);

    pub const FS: Reg = Reg(ffi::XED_REG_FS);

    pub const GS: Reg = Reg(ffi::XED_REG_GS);

    pub const SR_LAST: Reg = Reg(ffi::XED_REG_SR_LAST);

    pub const TMP0: Reg = Reg(ffi::XED_REG_TMP0);

    pub const TMP_FIRST: Reg = Reg(ffi::XED_REG_TMP_FIRST);

    pub const TMP1: Reg = Reg(ffi::XED_REG_TMP1);

    pub const TMP2: Reg = Reg(ffi::XED_REG_TMP2);

    pub const TMP3: Reg = Reg(ffi::XED_REG_TMP3);

    pub const TMP4: Reg = Reg(ffi::XED_REG_TMP4);

    pub const TMP5: Reg = Reg(ffi::XED_REG_TMP5);

    pub const TMP6: Reg = Reg(ffi::XED_REG_TMP6);

    pub const TMP7: Reg = Reg(ffi::XED_REG_TMP7);

    pub const TMP8: Reg = Reg(ffi::XED_REG_TMP8);

    pub const TMP9: Reg = Reg(ffi::XED_REG_TMP9);

    pub const TMP10: Reg = Reg(ffi::XED_REG_TMP10);

    pub const TMP11: Reg = Reg(ffi::XED_REG_TMP11);

    pub const TMP12: Reg = Reg(ffi::XED_REG_TMP12);

    pub const TMP13: Reg = Reg(ffi::XED_REG_TMP13);

    pub const TMP14: Reg = Reg(ffi::XED_REG_TMP14);

    pub const TMP15: Reg = Reg(ffi::XED_REG_TMP15);

    pub const TMP_LAST: Reg = Reg(ffi::XED_REG_TMP_LAST);

    pub const TMM0: Reg = Reg(ffi::XED_REG_TMM0);

    pub const TREG_FIRST: Reg = Reg(ffi::XED_REG_TREG_FIRST);

    pub const TMM1: Reg = Reg(ffi::XED_REG_TMM1);

    pub const TMM2: Reg = Reg(ffi::XED_REG_TMM2);

    pub const TMM3: Reg = Reg(ffi::XED_REG_TMM3);

    pub const TMM4: Reg = Reg(ffi::XED_REG_TMM4);

    pub const TMM5: Reg = Reg(ffi::XED_REG_TMM5);

    pub const TMM6: Reg = Reg(ffi::XED_REG_TMM6);

    pub const TMM7: Reg = Reg(ffi::XED_REG_TMM7);

    pub const TREG_LAST: Reg = Reg(ffi::XED_REG_TREG_LAST);

    pub const UIF: Reg = Reg(ffi::XED_REG_UIF);

    pub const UIF_FIRST: Reg = Reg(ffi::XED_REG_UIF_FIRST);

    pub const UIF_LAST: Reg = Reg(ffi::XED_REG_UIF_LAST);

    pub const ST0: Reg = Reg(ffi::XED_REG_ST0);

    pub const X87_FIRST: Reg = Reg(ffi::XED_REG_X87_FIRST);

    pub const ST1: Reg = Reg(ffi::XED_REG_ST1);

    pub const ST2: Reg = Reg(ffi::XED_REG_ST2);

    pub const ST3: Reg = Reg(ffi::XED_REG_ST3);

    pub const ST4: Reg = Reg(ffi::XED_REG_ST4);

    pub const ST5: Reg = Reg(ffi::XED_REG_ST5);

    pub const ST6: Reg = Reg(ffi::XED_REG_ST6);

    pub const ST7: Reg = Reg(ffi::XED_REG_ST7);

    pub const X87_LAST: Reg = Reg(ffi::XED_REG_X87_LAST);

    pub const XCR0: Reg = Reg(ffi::XED_REG_XCR0);

    pub const XCR_FIRST: Reg = Reg(ffi::XED_REG_XCR_FIRST);

    pub const XCR_LAST: Reg = Reg(ffi::XED_REG_XCR_LAST);

    pub const XMM0: Reg = Reg(ffi::XED_REG_XMM0);

    pub const XMM_FIRST: Reg = Reg(ffi::XED_REG_XMM_FIRST);

    pub const XMM1: Reg = Reg(ffi::XED_REG_XMM1);

    pub const XMM2: Reg = Reg(ffi::XED_REG_XMM2);

    pub const XMM3: Reg = Reg(ffi::XED_REG_XMM3);

    pub const XMM4: Reg = Reg(ffi::XED_REG_XMM4);

    pub const XMM5: Reg = Reg(ffi::XED_REG_XMM5);

    pub const XMM6: Reg = Reg(ffi::XED_REG_XMM6);

    pub const XMM7: Reg = Reg(ffi::XED_REG_XMM7);

    pub const XMM8: Reg = Reg(ffi::XED_REG_XMM8);

    pub const XMM9: Reg = Reg(ffi::XED_REG_XMM9);

    pub const XMM10: Reg = Reg(ffi::XED_REG_XMM10);

    pub const XMM11: Reg = Reg(ffi::XED_REG_XMM11);

    pub const XMM12: Reg = Reg(ffi::XED_REG_XMM12);

    pub const XMM13: Reg = Reg(ffi::XED_REG_XMM13);

    pub const XMM14: Reg = Reg(ffi::XED_REG_XMM14);

    pub const XMM15: Reg = Reg(ffi::XED_REG_XMM15);

    pub const XMM16: Reg = Reg(ffi::XED_REG_XMM16);

    pub const XMM17: Reg = Reg(ffi::XED_REG_XMM17);

    pub const XMM18: Reg = Reg(ffi::XED_REG_XMM18);

    pub const XMM19: Reg = Reg(ffi::XED_REG_XMM19);

    pub const XMM20: Reg = Reg(ffi::XED_REG_XMM20);

    pub const XMM21: Reg = Reg(ffi::XED_REG_XMM21);

    pub const XMM22: Reg = Reg(ffi::XED_REG_XMM22);

    pub const XMM23: Reg = Reg(ffi::XED_REG_XMM23);

    pub const XMM24: Reg = Reg(ffi::XED_REG_XMM24);

    pub const XMM25: Reg = Reg(ffi::XED_REG_XMM25);

    pub const XMM26: Reg = Reg(ffi::XED_REG_XMM26);

    pub const XMM27: Reg = Reg(ffi::XED_REG_XMM27);

    pub const XMM28: Reg = Reg(ffi::XED_REG_XMM28);

    pub const XMM29: Reg = Reg(ffi::XED_REG_XMM29);

    pub const XMM30: Reg = Reg(ffi::XED_REG_XMM30);

    pub const XMM31: Reg = Reg(ffi::XED_REG_XMM31);

    pub const XMM_LAST: Reg = Reg(ffi::XED_REG_XMM_LAST);

    pub const YMM0: Reg = Reg(ffi::XED_REG_YMM0);

    pub const YMM_FIRST: Reg = Reg(ffi::XED_REG_YMM_FIRST);

    pub const YMM1: Reg = Reg(ffi::XED_REG_YMM1);

    pub const YMM2: Reg = Reg(ffi::XED_REG_YMM2);

    pub const YMM3: Reg = Reg(ffi::XED_REG_YMM3);

    pub const YMM4: Reg = Reg(ffi::XED_REG_YMM4);

    pub const YMM5: Reg = Reg(ffi::XED_REG_YMM5);

    pub const YMM6: Reg = Reg(ffi::XED_REG_YMM6);

    pub const YMM7: Reg = Reg(ffi::XED_REG_YMM7);

    pub const YMM8: Reg = Reg(ffi::XED_REG_YMM8);

    pub const YMM9: Reg = Reg(ffi::XED_REG_YMM9);

    pub const YMM10: Reg = Reg(ffi::XED_REG_YMM10);

    pub const YMM11: Reg = Reg(ffi::XED_REG_YMM11);

    pub const YMM12: Reg = Reg(ffi::XED_REG_YMM12);

    pub const YMM13: Reg = Reg(ffi::XED_REG_YMM13);

    pub const YMM14: Reg = Reg(ffi::XED_REG_YMM14);

    pub const YMM15: Reg = Reg(ffi::XED_REG_YMM15);

    pub const YMM16: Reg = Reg(ffi::XED_REG_YMM16);

    pub const YMM17: Reg = Reg(ffi::XED_REG_YMM17);

    pub const YMM18: Reg = Reg(ffi::XED_REG_YMM18);

    pub const YMM19: Reg = Reg(ffi::XED_REG_YMM19);

    pub const YMM20: Reg = Reg(ffi::XED_REG_YMM20);

    pub const YMM21: Reg = Reg(ffi::XED_REG_YMM21);

    pub const YMM22: Reg = Reg(ffi::XED_REG_YMM22);

    pub const YMM23: Reg = Reg(ffi::XED_REG_YMM23);

    pub const YMM24: Reg = Reg(ffi::XED_REG_YMM24);

    pub const YMM25: Reg = Reg(ffi::XED_REG_YMM25);

    pub const YMM26: Reg = Reg(ffi::XED_REG_YMM26);

    pub const YMM27: Reg = Reg(ffi::XED_REG_YMM27);

    pub const YMM28: Reg = Reg(ffi::XED_REG_YMM28);

    pub const YMM29: Reg = Reg(ffi::XED_REG_YMM29);

    pub const YMM30: Reg = Reg(ffi::XED_REG_YMM30);

    pub const YMM31: Reg = Reg(ffi::XED_REG_YMM31);

    pub const YMM_LAST: Reg = Reg(ffi::XED_REG_YMM_LAST);

    pub const ZMM0: Reg = Reg(ffi::XED_REG_ZMM0);

    pub const ZMM_FIRST: Reg = Reg(ffi::XED_REG_ZMM_FIRST);

    pub const ZMM1: Reg = Reg(ffi::XED_REG_ZMM1);

    pub const ZMM2: Reg = Reg(ffi::XED_REG_ZMM2);

    pub const ZMM3: Reg = Reg(ffi::XED_REG_ZMM3);

    pub const ZMM4: Reg = Reg(ffi::XED_REG_ZMM4);

    pub const ZMM5: Reg = Reg(ffi::XED_REG_ZMM5);

    pub const ZMM6: Reg = Reg(ffi::XED_REG_ZMM6);

    pub const ZMM7: Reg = Reg(ffi::XED_REG_ZMM7);

    pub const ZMM8: Reg = Reg(ffi::XED_REG_ZMM8);

    pub const ZMM9: Reg = Reg(ffi::XED_REG_ZMM9);

    pub const ZMM10: Reg = Reg(ffi::XED_REG_ZMM10);

    pub const ZMM11: Reg = Reg(ffi::XED_REG_ZMM11);

    pub const ZMM12: Reg = Reg(ffi::XED_REG_ZMM12);

    pub const ZMM13: Reg = Reg(ffi::XED_REG_ZMM13);

    pub const ZMM14: Reg = Reg(ffi::XED_REG_ZMM14);

    pub const ZMM15: Reg = Reg(ffi::XED_REG_ZMM15);

    pub const ZMM16: Reg = Reg(ffi::XED_REG_ZMM16);

    pub const ZMM17: Reg = Reg(ffi::XED_REG_ZMM17);

    pub const ZMM18: Reg = Reg(ffi::XED_REG_ZMM18);

    pub const ZMM19: Reg = Reg(ffi::XED_REG_ZMM19);

    pub const ZMM20: Reg = Reg(ffi::XED_REG_ZMM20);

    pub const ZMM21: Reg = Reg(ffi::XED_REG_ZMM21);

    pub const ZMM22: Reg = Reg(ffi::XED_REG_ZMM22);

    pub const ZMM23: Reg = Reg(ffi::XED_REG_ZMM23);

    pub const ZMM24: Reg = Reg(ffi::XED_REG_ZMM24);

    pub const ZMM25: Reg = Reg(ffi::XED_REG_ZMM25);

    pub const ZMM26: Reg = Reg(ffi::XED_REG_ZMM26);

    pub const ZMM27: Reg = Reg(ffi::XED_REG_ZMM27);

    pub const ZMM28: Reg = Reg(ffi::XED_REG_ZMM28);

    pub const ZMM29: Reg = Reg(ffi::XED_REG_ZMM29);

    pub const ZMM30: Reg = Reg(ffi::XED_REG_ZMM30);

    pub const ZMM31: Reg = Reg(ffi::XED_REG_ZMM31);

    pub const ZMM_LAST: Reg = Reg(ffi::XED_REG_ZMM_LAST);
}

impl fmt::Display for Reg {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_reg_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for Reg {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(Reg(unsafe { ffi::str2xed_reg_enum_t(s.as_ptr()) }))
    }
}
