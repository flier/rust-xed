//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct Chip(ffi::xed_chip_enum_t);

impl Chip {
    pub const INVALID: Chip = Chip(ffi::XED_CHIP_INVALID);

    pub const I86: Chip = Chip(ffi::XED_CHIP_I86);

    pub const I86FP: Chip = Chip(ffi::XED_CHIP_I86FP);

    pub const I186: Chip = Chip(ffi::XED_CHIP_I186);

    pub const I186FP: Chip = Chip(ffi::XED_CHIP_I186FP);

    pub const I286REAL: Chip = Chip(ffi::XED_CHIP_I286REAL);

    pub const I286: Chip = Chip(ffi::XED_CHIP_I286);

    pub const I2186FP: Chip = Chip(ffi::XED_CHIP_I2186FP);

    pub const I386REAL: Chip = Chip(ffi::XED_CHIP_I386REAL);

    pub const I386: Chip = Chip(ffi::XED_CHIP_I386);

    pub const I386FP: Chip = Chip(ffi::XED_CHIP_I386FP);

    pub const I486REAL: Chip = Chip(ffi::XED_CHIP_I486REAL);

    pub const I486: Chip = Chip(ffi::XED_CHIP_I486);

    pub const PENTIUMREAL: Chip = Chip(ffi::XED_CHIP_PENTIUMREAL);

    pub const PENTIUM: Chip = Chip(ffi::XED_CHIP_PENTIUM);

    pub const QUARK: Chip = Chip(ffi::XED_CHIP_QUARK);

    pub const PENTIUMMMXREAL: Chip = Chip(ffi::XED_CHIP_PENTIUMMMXREAL);

    pub const PENTIUMMMX: Chip = Chip(ffi::XED_CHIP_PENTIUMMMX);

    pub const ALLREAL: Chip = Chip(ffi::XED_CHIP_ALLREAL);

    pub const PENTIUMPRO: Chip = Chip(ffi::XED_CHIP_PENTIUMPRO);

    pub const PENTIUM2: Chip = Chip(ffi::XED_CHIP_PENTIUM2);

    pub const PENTIUM3: Chip = Chip(ffi::XED_CHIP_PENTIUM3);

    pub const PENTIUM4: Chip = Chip(ffi::XED_CHIP_PENTIUM4);

    pub const P4PRESCOTT: Chip = Chip(ffi::XED_CHIP_P4PRESCOTT);

    pub const P4PRESCOTT_NOLAHF: Chip = Chip(ffi::XED_CHIP_P4PRESCOTT_NOLAHF);

    pub const P4PRESCOTT_VTX: Chip = Chip(ffi::XED_CHIP_P4PRESCOTT_VTX);

    pub const MEROM: Chip = Chip(ffi::XED_CHIP_MEROM);

    pub const PENRYN: Chip = Chip(ffi::XED_CHIP_PENRYN);

    pub const PENRYN_E: Chip = Chip(ffi::XED_CHIP_PENRYN_E);

    pub const NEHALEM: Chip = Chip(ffi::XED_CHIP_NEHALEM);

    pub const WESTMERE: Chip = Chip(ffi::XED_CHIP_WESTMERE);

    pub const BONNELL: Chip = Chip(ffi::XED_CHIP_BONNELL);

    pub const SALTWELL: Chip = Chip(ffi::XED_CHIP_SALTWELL);

    pub const SILVERMONT: Chip = Chip(ffi::XED_CHIP_SILVERMONT);

    pub const VIA: Chip = Chip(ffi::XED_CHIP_VIA);

    pub const AMD_K10: Chip = Chip(ffi::XED_CHIP_AMD_K10);

    pub const AMD_BULLDOZER: Chip = Chip(ffi::XED_CHIP_AMD_BULLDOZER);

    pub const AMD_PILEDRIVER: Chip = Chip(ffi::XED_CHIP_AMD_PILEDRIVER);

    pub const AMD_ZEN: Chip = Chip(ffi::XED_CHIP_AMD_ZEN);

    pub const AMD_ZENPLUS: Chip = Chip(ffi::XED_CHIP_AMD_ZENPLUS);

    pub const AMD_ZEN2: Chip = Chip(ffi::XED_CHIP_AMD_ZEN2);

    pub const AMD_FUTURE: Chip = Chip(ffi::XED_CHIP_AMD_FUTURE);

    pub const GOLDMONT: Chip = Chip(ffi::XED_CHIP_GOLDMONT);

    pub const GOLDMONT_PLUS: Chip = Chip(ffi::XED_CHIP_GOLDMONT_PLUS);

    pub const TREMONT: Chip = Chip(ffi::XED_CHIP_TREMONT);

    pub const SNOW_RIDGE: Chip = Chip(ffi::XED_CHIP_SNOW_RIDGE);

    pub const LAKEFIELD: Chip = Chip(ffi::XED_CHIP_LAKEFIELD);

    pub const SANDYBRIDGE: Chip = Chip(ffi::XED_CHIP_SANDYBRIDGE);

    pub const IVYBRIDGE: Chip = Chip(ffi::XED_CHIP_IVYBRIDGE);

    pub const HASWELL: Chip = Chip(ffi::XED_CHIP_HASWELL);

    pub const BROADWELL: Chip = Chip(ffi::XED_CHIP_BROADWELL);

    pub const SKYLAKE: Chip = Chip(ffi::XED_CHIP_SKYLAKE);

    pub const COMET_LAKE: Chip = Chip(ffi::XED_CHIP_COMET_LAKE);

    pub const SKYLAKE_SERVER: Chip = Chip(ffi::XED_CHIP_SKYLAKE_SERVER);

    pub const CASCADE_LAKE: Chip = Chip(ffi::XED_CHIP_CASCADE_LAKE);

    pub const COOPER_LAKE: Chip = Chip(ffi::XED_CHIP_COOPER_LAKE);

    pub const KNL: Chip = Chip(ffi::XED_CHIP_KNL);

    pub const KNM: Chip = Chip(ffi::XED_CHIP_KNM);

    pub const CANNONLAKE: Chip = Chip(ffi::XED_CHIP_CANNONLAKE);

    pub const ICE_LAKE: Chip = Chip(ffi::XED_CHIP_ICE_LAKE);

    pub const ICE_LAKE_SERVER: Chip = Chip(ffi::XED_CHIP_ICE_LAKE_SERVER);

    pub const TIGER_LAKE: Chip = Chip(ffi::XED_CHIP_TIGER_LAKE);

    pub const ALDER_LAKE: Chip = Chip(ffi::XED_CHIP_ALDER_LAKE);

    pub const SAPPHIRE_RAPIDS: Chip = Chip(ffi::XED_CHIP_SAPPHIRE_RAPIDS);

    pub const EMERALD_RAPIDS: Chip = Chip(ffi::XED_CHIP_EMERALD_RAPIDS);

    pub const GRANITE_RAPIDS: Chip = Chip(ffi::XED_CHIP_GRANITE_RAPIDS);

    pub const SIERRA_FOREST: Chip = Chip(ffi::XED_CHIP_SIERRA_FOREST);

    pub const CLEARWATER_FOREST: Chip = Chip(ffi::XED_CHIP_CLEARWATER_FOREST);

    pub const ARROW_LAKE: Chip = Chip(ffi::XED_CHIP_ARROW_LAKE);

    pub const LUNAR_LAKE: Chip = Chip(ffi::XED_CHIP_LUNAR_LAKE);

    pub const PANTHER_LAKE: Chip = Chip(ffi::XED_CHIP_PANTHER_LAKE);

    pub const FUTURE: Chip = Chip(ffi::XED_CHIP_FUTURE);

    pub const ALL: Chip = Chip(ffi::XED_CHIP_ALL);
}

impl fmt::Display for Chip {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_chip_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for Chip {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(Chip(unsafe { ffi::str2xed_chip_enum_t(s.as_ptr()) }))
    }
}
