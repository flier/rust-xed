//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct Syntax(ffi::xed_syntax_enum_t);

impl Syntax {
    pub const INVALID: Syntax = Syntax(ffi::XED_SYNTAX_INVALID);

    /// XED disassembly syntax
    pub const XED: Syntax = Syntax(ffi::XED_SYNTAX_XED);

    /// ATT SYSV disassembly syntax
    pub const ATT: Syntax = Syntax(ffi::XED_SYNTAX_ATT);

    /// Intel disassembly syntax
    pub const INTEL: Syntax = Syntax(ffi::XED_SYNTAX_INTEL);
}

impl fmt::Display for Syntax {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_syntax_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for Syntax {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(Syntax(unsafe { ffi::str2xed_syntax_enum_t(s.as_ptr()) }))
    }
}
