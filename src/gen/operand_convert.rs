//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct OperandConvert(ffi::xed_operand_convert_enum_t);

impl OperandConvert {
    pub const INVALID: OperandConvert = OperandConvert(ffi::XED_OPERAND_CONVERT_INVALID);

    pub const ZEROSTR: OperandConvert = OperandConvert(ffi::XED_OPERAND_CONVERT_ZEROSTR);

    pub const SAESTR: OperandConvert = OperandConvert(ffi::XED_OPERAND_CONVERT_SAESTR);

    pub const ROUNDC: OperandConvert = OperandConvert(ffi::XED_OPERAND_CONVERT_ROUNDC);

    pub const BCASTSTR: OperandConvert = OperandConvert(ffi::XED_OPERAND_CONVERT_BCASTSTR);
}

impl fmt::Display for OperandConvert {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_operand_convert_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for OperandConvert {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(OperandConvert(unsafe {
            ffi::str2xed_operand_convert_enum_t(s.as_ptr())
        }))
    }
}
