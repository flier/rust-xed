//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct CpuidBit(ffi::xed_cpuid_bit_enum_t);

impl CpuidBit {
    pub const INVALID: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_INVALID);

    pub const ADOXADCX: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_ADOXADCX);

    pub const AES: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AES);

    pub const AMX_BF16: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AMX_BF16);

    pub const AMX_INT8: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AMX_INT8);

    pub const AMX_TILES: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AMX_TILES);

    pub const AVX: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX);

    pub const AVX2: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX2);

    pub const AVX512BW: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512BW);

    pub const AVX512CD: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512CD);

    pub const AVX512DQ: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512DQ);

    pub const AVX512ER: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512ER);

    pub const AVX512F: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512F);

    pub const AVX512IFMA: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512IFMA);

    pub const AVX512PF: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512PF);

    pub const AVX512VBMI: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512VBMI);

    pub const AVX512VL: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512VL);

    pub const AVX512_4FMAPS: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512_4FMAPS);

    pub const AVX512_4VNNIW: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512_4VNNIW);

    pub const AVX512_BITALG: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512_BITALG);

    pub const AVX512_VBMI2: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512_VBMI2);

    pub const AVX512_VNNI: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512_VNNI);

    pub const AVX512_VP2INTERSECT: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512_VP2INTERSECT);

    pub const AVX512_VPOPCNTDQ: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX512_VPOPCNTDQ);

    pub const AVX_VNNI: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_AVX_VNNI);

    pub const BF16: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_BF16);

    pub const BMI1: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_BMI1);

    pub const BMI2: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_BMI2);

    pub const CET: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_CET);

    pub const CLDEMOTE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_CLDEMOTE);

    pub const CLFLUSH: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_CLFLUSH);

    pub const CLFLUSHOPT: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_CLFLUSHOPT);

    pub const CLWB: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_CLWB);

    pub const CMPXCHG16B: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_CMPXCHG16B);

    pub const ENQCMD: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_ENQCMD);

    pub const F16C: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_F16C);

    pub const FMA: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_FMA);

    pub const FXSAVE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_FXSAVE);

    pub const GFNI: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_GFNI);

    pub const HRESET: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_HRESET);

    pub const INTEL64: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_INTEL64);

    pub const INTELPT: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_INTELPT);

    pub const INVPCID: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_INVPCID);

    pub const KLENABLED: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_KLENABLED);

    pub const KLSUPPORTED: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_KLSUPPORTED);

    pub const KLWIDE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_KLWIDE);

    pub const LAHF: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_LAHF);

    pub const LZCNT: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_LZCNT);

    pub const MCOMMIT: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_MCOMMIT);

    pub const MONITOR: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_MONITOR);

    pub const MONITORX: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_MONITORX);

    pub const MOVDIR64B: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_MOVDIR64B);

    pub const MOVDIRI: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_MOVDIRI);

    pub const MOVEBE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_MOVEBE);

    pub const MPX: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_MPX);

    pub const OSPKU: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_OSPKU);

    pub const OSXSAVE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_OSXSAVE);

    pub const PCLMULQDQ: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_PCLMULQDQ);

    pub const PCONFIG: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_PCONFIG);

    pub const PKU: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_PKU);

    pub const POPCNT: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_POPCNT);

    pub const PREFETCHW: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_PREFETCHW);

    pub const PREFETCHWT1: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_PREFETCHWT1);

    pub const PTWRITE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_PTWRITE);

    pub const RDP: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_RDP);

    pub const RDPRU: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_RDPRU);

    pub const RDRAND: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_RDRAND);

    pub const RDSEED: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_RDSEED);

    pub const RDTSCP: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_RDTSCP);

    pub const RDWRFSGS: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_RDWRFSGS);

    pub const RTM: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_RTM);

    pub const SERIALIZE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SERIALIZE);

    pub const SGX: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SGX);

    pub const SHA: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SHA);

    pub const SMAP: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SMAP);

    pub const SMX: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SMX);

    pub const SNP: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SNP);

    pub const SSE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SSE);

    pub const SSE2: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SSE2);

    pub const SSE3: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SSE3);

    pub const SSE4: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SSE4);

    pub const SSE42: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SSE42);

    pub const SSE4A: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SSE4A);

    pub const SSSE3: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_SSSE3);

    pub const TSX_LDTRK: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_TSX_LDTRK);

    pub const UINTR: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_UINTR);

    pub const VAES: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VAES);

    pub const VIA_PADLOCK_AES: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_AES);

    pub const VIA_PADLOCK_AES_EN: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_AES_EN);

    pub const VIA_PADLOCK_PMM: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_PMM);

    pub const VIA_PADLOCK_PMM_EN: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_PMM_EN);

    pub const VIA_PADLOCK_RNG: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_RNG);

    pub const VIA_PADLOCK_RNG_EN: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_RNG_EN);

    pub const VIA_PADLOCK_SHA: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_SHA);

    pub const VIA_PADLOCK_SHA_EN: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VIA_PADLOCK_SHA_EN);

    pub const VMX: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VMX);

    pub const VPCLMULQDQ: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_VPCLMULQDQ);

    pub const WAITPKG: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_WAITPKG);

    pub const WBNOINVD: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_WBNOINVD);

    pub const XSAVE: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_XSAVE);

    pub const XSAVEC: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_XSAVEC);

    pub const XSAVEOPT: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_XSAVEOPT);

    pub const XSAVES: CpuidBit = CpuidBit(ffi::XED_CPUID_BIT_XSAVES);
}

impl fmt::Display for CpuidBit {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_cpuid_bit_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for CpuidBit {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(CpuidBit(unsafe {
            ffi::str2xed_cpuid_bit_enum_t(s.as_ptr())
        }))
    }
}
