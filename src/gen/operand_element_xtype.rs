//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct OperandElementXtype(ffi::xed_operand_element_xtype_enum_t);

impl OperandElementXtype {
    pub const INVALID: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_INVALID);

    pub const B80: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_B80);

    pub const BF16: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_BF16);

    pub const F16: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_F16);

    pub const F32: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_F32);

    pub const F64: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_F64);

    pub const F80: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_F80);

    pub const I1: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_I1);

    pub const I16: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_I16);

    pub const I32: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_I32);

    pub const I64: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_I64);

    pub const I8: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_I8);

    pub const INT: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_INT);

    pub const STRUCT: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_STRUCT);

    pub const U128: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_U128);

    pub const U16: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_U16);

    pub const U256: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_U256);

    pub const U32: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_U32);

    pub const U64: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_U64);

    pub const U8: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_U8);

    pub const UINT: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_UINT);

    pub const VAR: OperandElementXtype = OperandElementXtype(ffi::XED_OPERAND_XTYPE_VAR);
}

impl fmt::Display for OperandElementXtype {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_operand_element_xtype_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for OperandElementXtype {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(OperandElementXtype(unsafe {
            ffi::str2xed_operand_element_xtype_enum_t(s.as_ptr())
        }))
    }
}
