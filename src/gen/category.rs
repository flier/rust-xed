//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct Category(ffi::xed_category_enum_t);

impl Category {
    pub const INVALID: Category = Category(ffi::XED_CATEGORY_INVALID);

    pub const _3DNOW: Category = Category(ffi::XED_CATEGORY_3DNOW);

    pub const ADOX_ADCX: Category = Category(ffi::XED_CATEGORY_ADOX_ADCX);

    pub const AES: Category = Category(ffi::XED_CATEGORY_AES);

    pub const AMX_TILE: Category = Category(ffi::XED_CATEGORY_AMX_TILE);

    pub const AVX: Category = Category(ffi::XED_CATEGORY_AVX);

    pub const AVX2: Category = Category(ffi::XED_CATEGORY_AVX2);

    pub const AVX2GATHER: Category = Category(ffi::XED_CATEGORY_AVX2GATHER);

    pub const AVX512: Category = Category(ffi::XED_CATEGORY_AVX512);

    pub const AVX512_4FMAPS: Category = Category(ffi::XED_CATEGORY_AVX512_4FMAPS);

    pub const AVX512_4VNNIW: Category = Category(ffi::XED_CATEGORY_AVX512_4VNNIW);

    pub const AVX512_BITALG: Category = Category(ffi::XED_CATEGORY_AVX512_BITALG);

    pub const AVX512_VBMI: Category = Category(ffi::XED_CATEGORY_AVX512_VBMI);

    pub const AVX512_VP2INTERSECT: Category = Category(ffi::XED_CATEGORY_AVX512_VP2INTERSECT);

    pub const BINARY: Category = Category(ffi::XED_CATEGORY_BINARY);

    pub const BITBYTE: Category = Category(ffi::XED_CATEGORY_BITBYTE);

    pub const BLEND: Category = Category(ffi::XED_CATEGORY_BLEND);

    pub const BMI1: Category = Category(ffi::XED_CATEGORY_BMI1);

    pub const BMI2: Category = Category(ffi::XED_CATEGORY_BMI2);

    pub const BROADCAST: Category = Category(ffi::XED_CATEGORY_BROADCAST);

    pub const CALL: Category = Category(ffi::XED_CATEGORY_CALL);

    pub const CET: Category = Category(ffi::XED_CATEGORY_CET);

    pub const CLDEMOTE: Category = Category(ffi::XED_CATEGORY_CLDEMOTE);

    pub const CLFLUSHOPT: Category = Category(ffi::XED_CATEGORY_CLFLUSHOPT);

    pub const CLWB: Category = Category(ffi::XED_CATEGORY_CLWB);

    pub const CLZERO: Category = Category(ffi::XED_CATEGORY_CLZERO);

    pub const CMOV: Category = Category(ffi::XED_CATEGORY_CMOV);

    pub const COMPRESS: Category = Category(ffi::XED_CATEGORY_COMPRESS);

    pub const COND_BR: Category = Category(ffi::XED_CATEGORY_COND_BR);

    pub const CONFLICT: Category = Category(ffi::XED_CATEGORY_CONFLICT);

    pub const CONVERT: Category = Category(ffi::XED_CATEGORY_CONVERT);

    pub const DATAXFER: Category = Category(ffi::XED_CATEGORY_DATAXFER);

    pub const DECIMAL: Category = Category(ffi::XED_CATEGORY_DECIMAL);

    pub const ENQCMD: Category = Category(ffi::XED_CATEGORY_ENQCMD);

    pub const EXPAND: Category = Category(ffi::XED_CATEGORY_EXPAND);

    pub const FCMOV: Category = Category(ffi::XED_CATEGORY_FCMOV);

    pub const FLAGOP: Category = Category(ffi::XED_CATEGORY_FLAGOP);

    pub const FMA4: Category = Category(ffi::XED_CATEGORY_FMA4);

    pub const GATHER: Category = Category(ffi::XED_CATEGORY_GATHER);

    pub const GFNI: Category = Category(ffi::XED_CATEGORY_GFNI);

    pub const HRESET: Category = Category(ffi::XED_CATEGORY_HRESET);

    pub const IFMA: Category = Category(ffi::XED_CATEGORY_IFMA);

    pub const INTERRUPT: Category = Category(ffi::XED_CATEGORY_INTERRUPT);

    pub const IO: Category = Category(ffi::XED_CATEGORY_IO);

    pub const IOSTRINGOP: Category = Category(ffi::XED_CATEGORY_IOSTRINGOP);

    pub const KEYLOCKER: Category = Category(ffi::XED_CATEGORY_KEYLOCKER);

    pub const KEYLOCKER_WIDE: Category = Category(ffi::XED_CATEGORY_KEYLOCKER_WIDE);

    pub const KMASK: Category = Category(ffi::XED_CATEGORY_KMASK);

    pub const LEGACY: Category = Category(ffi::XED_CATEGORY_LEGACY);

    pub const LOGICAL: Category = Category(ffi::XED_CATEGORY_LOGICAL);

    pub const LOGICAL_FP: Category = Category(ffi::XED_CATEGORY_LOGICAL_FP);

    pub const LZCNT: Category = Category(ffi::XED_CATEGORY_LZCNT);

    pub const MISC: Category = Category(ffi::XED_CATEGORY_MISC);

    pub const MMX: Category = Category(ffi::XED_CATEGORY_MMX);

    pub const MOVDIR: Category = Category(ffi::XED_CATEGORY_MOVDIR);

    pub const MPX: Category = Category(ffi::XED_CATEGORY_MPX);

    pub const NOP: Category = Category(ffi::XED_CATEGORY_NOP);

    pub const PCLMULQDQ: Category = Category(ffi::XED_CATEGORY_PCLMULQDQ);

    pub const PCONFIG: Category = Category(ffi::XED_CATEGORY_PCONFIG);

    pub const PKU: Category = Category(ffi::XED_CATEGORY_PKU);

    pub const POP: Category = Category(ffi::XED_CATEGORY_POP);

    pub const PREFETCH: Category = Category(ffi::XED_CATEGORY_PREFETCH);

    pub const PREFETCHWT1: Category = Category(ffi::XED_CATEGORY_PREFETCHWT1);

    pub const PTWRITE: Category = Category(ffi::XED_CATEGORY_PTWRITE);

    pub const PUSH: Category = Category(ffi::XED_CATEGORY_PUSH);

    pub const RDPID: Category = Category(ffi::XED_CATEGORY_RDPID);

    pub const RDPRU: Category = Category(ffi::XED_CATEGORY_RDPRU);

    pub const RDRAND: Category = Category(ffi::XED_CATEGORY_RDRAND);

    pub const RDSEED: Category = Category(ffi::XED_CATEGORY_RDSEED);

    pub const RDWRFSGS: Category = Category(ffi::XED_CATEGORY_RDWRFSGS);

    pub const RET: Category = Category(ffi::XED_CATEGORY_RET);

    pub const ROTATE: Category = Category(ffi::XED_CATEGORY_ROTATE);

    pub const SCATTER: Category = Category(ffi::XED_CATEGORY_SCATTER);

    pub const SEGOP: Category = Category(ffi::XED_CATEGORY_SEGOP);

    pub const SEMAPHORE: Category = Category(ffi::XED_CATEGORY_SEMAPHORE);

    pub const SERIALIZE: Category = Category(ffi::XED_CATEGORY_SERIALIZE);

    pub const SETCC: Category = Category(ffi::XED_CATEGORY_SETCC);

    pub const SGX: Category = Category(ffi::XED_CATEGORY_SGX);

    pub const SHA: Category = Category(ffi::XED_CATEGORY_SHA);

    pub const SHIFT: Category = Category(ffi::XED_CATEGORY_SHIFT);

    pub const SMAP: Category = Category(ffi::XED_CATEGORY_SMAP);

    pub const SSE: Category = Category(ffi::XED_CATEGORY_SSE);

    pub const STRINGOP: Category = Category(ffi::XED_CATEGORY_STRINGOP);

    pub const STTNI: Category = Category(ffi::XED_CATEGORY_STTNI);

    pub const SYSCALL: Category = Category(ffi::XED_CATEGORY_SYSCALL);

    pub const SYSRET: Category = Category(ffi::XED_CATEGORY_SYSRET);

    pub const SYSTEM: Category = Category(ffi::XED_CATEGORY_SYSTEM);

    pub const TBM: Category = Category(ffi::XED_CATEGORY_TBM);

    pub const TSX_LDTRK: Category = Category(ffi::XED_CATEGORY_TSX_LDTRK);

    pub const UINTR: Category = Category(ffi::XED_CATEGORY_UINTR);

    pub const UNCOND_BR: Category = Category(ffi::XED_CATEGORY_UNCOND_BR);

    pub const VAES: Category = Category(ffi::XED_CATEGORY_VAES);

    pub const VBMI2: Category = Category(ffi::XED_CATEGORY_VBMI2);

    pub const VEX: Category = Category(ffi::XED_CATEGORY_VEX);

    pub const VFMA: Category = Category(ffi::XED_CATEGORY_VFMA);

    pub const VIA_PADLOCK: Category = Category(ffi::XED_CATEGORY_VIA_PADLOCK);

    pub const VPCLMULQDQ: Category = Category(ffi::XED_CATEGORY_VPCLMULQDQ);

    pub const VTX: Category = Category(ffi::XED_CATEGORY_VTX);

    pub const WAITPKG: Category = Category(ffi::XED_CATEGORY_WAITPKG);

    pub const WIDENOP: Category = Category(ffi::XED_CATEGORY_WIDENOP);

    pub const X87_ALU: Category = Category(ffi::XED_CATEGORY_X87_ALU);

    pub const XOP: Category = Category(ffi::XED_CATEGORY_XOP);

    pub const XSAVE: Category = Category(ffi::XED_CATEGORY_XSAVE);

    pub const XSAVEOPT: Category = Category(ffi::XED_CATEGORY_XSAVEOPT);
}

impl fmt::Display for Category {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_category_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for Category {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(Category(unsafe {
            ffi::str2xed_category_enum_t(s.as_ptr())
        }))
    }
}
