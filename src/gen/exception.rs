//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct Exception(ffi::xed_exception_enum_t);

impl Exception {
    pub const INVALID: Exception = Exception(ffi::XED_EXCEPTION_INVALID);

    pub const AMX_E1: Exception = Exception(ffi::XED_EXCEPTION_AMX_E1);

    pub const AMX_E1_EVEX: Exception = Exception(ffi::XED_EXCEPTION_AMX_E1_EVEX);

    pub const AMX_E2: Exception = Exception(ffi::XED_EXCEPTION_AMX_E2);

    pub const AMX_E2_EVEX: Exception = Exception(ffi::XED_EXCEPTION_AMX_E2_EVEX);

    pub const AMX_E3: Exception = Exception(ffi::XED_EXCEPTION_AMX_E3);

    pub const AMX_E3_EVEX: Exception = Exception(ffi::XED_EXCEPTION_AMX_E3_EVEX);

    pub const AMX_E4: Exception = Exception(ffi::XED_EXCEPTION_AMX_E4);

    pub const AMX_E5: Exception = Exception(ffi::XED_EXCEPTION_AMX_E5);

    pub const AMX_E6: Exception = Exception(ffi::XED_EXCEPTION_AMX_E6);

    pub const APX_EVEX_BMI: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_BMI);

    pub const APX_EVEX_CCMP: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_CCMP);

    pub const APX_EVEX_CET_WRSS: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_CET_WRSS);

    pub const APX_EVEX_CET_WRUSS: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_CET_WRUSS);

    pub const APX_EVEX_CFCMOV: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_CFCMOV);

    pub const APX_EVEX_CMPCCXADD: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_CMPCCXADD);

    pub const APX_EVEX_ENQCMD: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_ENQCMD);

    pub const APX_EVEX_INT: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_INT);

    pub const APX_EVEX_INVEPT: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_INVEPT);

    pub const APX_EVEX_INVPCID: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_INVPCID);

    pub const APX_EVEX_INVVPID: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_INVVPID);

    pub const APX_EVEX_KEYLOCKER: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_KEYLOCKER);

    pub const APX_EVEX_KMOV: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_KMOV);

    pub const APX_EVEX_PP2: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_PP2);

    pub const APX_EVEX_RAO_INT: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_RAO_INT);

    pub const APX_EVEX_SHA: Exception = Exception(ffi::XED_EXCEPTION_APX_EVEX_SHA);

    pub const APX_LEGACY_JMPABS: Exception = Exception(ffi::XED_EXCEPTION_APX_LEGACY_JMPABS);

    pub const AVX512_E1: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E1);

    pub const AVX512_E10: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E10);

    pub const AVX512_E10NF: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E10NF);

    pub const AVX512_E11: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E11);

    pub const AVX512_E12: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E12);

    pub const AVX512_E12NP: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E12NP);

    pub const AVX512_E1NF: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E1NF);

    pub const AVX512_E2: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E2);

    pub const AVX512_E3: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E3);

    pub const AVX512_E3NF: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E3NF);

    pub const AVX512_E4: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E4);

    pub const AVX512_E4NF: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E4NF);

    pub const AVX512_E5: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E5);

    pub const AVX512_E5NF: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E5NF);

    pub const AVX512_E6: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E6);

    pub const AVX512_E6NF: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E6NF);

    pub const AVX512_E7NM: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E7NM);

    pub const AVX512_E7NM128: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E7NM128);

    pub const AVX512_E9NF: Exception = Exception(ffi::XED_EXCEPTION_AVX512_E9NF);

    pub const AVX512_K20: Exception = Exception(ffi::XED_EXCEPTION_AVX512_K20);

    pub const AVX512_K21: Exception = Exception(ffi::XED_EXCEPTION_AVX512_K21);

    pub const AVX_TYPE_1: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_1);

    pub const AVX_TYPE_11: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_11);

    pub const AVX_TYPE_12: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_12);

    pub const AVX_TYPE_14: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_14);

    pub const AVX_TYPE_2: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_2);

    pub const AVX_TYPE_2D: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_2D);

    pub const AVX_TYPE_3: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_3);

    pub const AVX_TYPE_4: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_4);

    pub const AVX_TYPE_4M: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_4M);

    pub const AVX_TYPE_5: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_5);

    pub const AVX_TYPE_5L: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_5L);

    pub const AVX_TYPE_6: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_6);

    pub const AVX_TYPE_7: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_7);

    pub const AVX_TYPE_8: Exception = Exception(ffi::XED_EXCEPTION_AVX_TYPE_8);

    pub const LEGACY_RAO_INT: Exception = Exception(ffi::XED_EXCEPTION_LEGACY_RAO_INT);

    pub const MMX_FP: Exception = Exception(ffi::XED_EXCEPTION_MMX_FP);

    pub const MMX_FP_16ALIGN: Exception = Exception(ffi::XED_EXCEPTION_MMX_FP_16ALIGN);

    pub const MMX_MEM: Exception = Exception(ffi::XED_EXCEPTION_MMX_MEM);

    pub const MMX_NOFP: Exception = Exception(ffi::XED_EXCEPTION_MMX_NOFP);

    pub const MMX_NOFP2: Exception = Exception(ffi::XED_EXCEPTION_MMX_NOFP2);

    pub const MMX_NOMEM: Exception = Exception(ffi::XED_EXCEPTION_MMX_NOMEM);

    pub const SSE_TYPE_1: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_1);

    pub const SSE_TYPE_2: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_2);

    pub const SSE_TYPE_2D: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_2D);

    pub const SSE_TYPE_3: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_3);

    pub const SSE_TYPE_4: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_4);

    pub const SSE_TYPE_4M: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_4M);

    pub const SSE_TYPE_5: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_5);

    pub const SSE_TYPE_7: Exception = Exception(ffi::XED_EXCEPTION_SSE_TYPE_7);

    pub const USER_MSR_EVEX: Exception = Exception(ffi::XED_EXCEPTION_USER_MSR_EVEX);

    pub const USER_MSR_LEGACY: Exception = Exception(ffi::XED_EXCEPTION_USER_MSR_LEGACY);

    pub const USER_MSR_VEX: Exception = Exception(ffi::XED_EXCEPTION_USER_MSR_VEX);
}

impl fmt::Display for Exception {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_exception_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for Exception {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(Exception(unsafe {
            ffi::str2xed_exception_enum_t(s.as_ptr())
        }))
    }
}
