//! automatically generated by enum_gen.py, DON't EDIT IT

use std::{
    ffi::{CStr, CString, NulError},
    fmt,
    str::FromStr,
};

use derive_more::{From, Into};

use crate::ffi;

#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, From, Into)]
pub struct OperandVisibility(ffi::xed_operand_visibility_enum_t);

impl OperandVisibility {
    pub const INVALID: OperandVisibility = OperandVisibility(ffi::XED_OPVIS_INVALID);

    /// Shows up in operand encoding
    pub const EXPLICIT: OperandVisibility = OperandVisibility(ffi::XED_OPVIS_EXPLICIT);

    /// Part of the opcode, but listed as an operand
    pub const IMPLICIT: OperandVisibility = OperandVisibility(ffi::XED_OPVIS_IMPLICIT);

    /// Part of the opcode, but not typically listed as an operand
    pub const SUPPRESSED: OperandVisibility = OperandVisibility(ffi::XED_OPVIS_SUPPRESSED);
}

impl fmt::Display for OperandVisibility {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_str(unsafe {
            CStr::from_ptr(ffi::xed_operand_visibility_enum_t2str(self.0))
                .to_str()
                .unwrap()
        })
    }
}

impl FromStr for OperandVisibility {
    type Err = NulError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let s = CString::new(s)?;

        Ok(OperandVisibility(unsafe {
            ffi::str2xed_operand_visibility_enum_t(s.as_ptr())
        }))
    }
}
